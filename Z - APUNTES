--------------------------------------Data Actual------------------------------------

---------------------------------------- 8 - 11
- Información agregada en las Tablas del Admin.. Conectada con la Base de datos.
- Botones de disponiblidad validados desde la base de datos.
- Botones para editar y eliminar agregados.
- Funcionalidad de Editar Doctores agregada (Aún sin conexión a la base de datos)
- Funcionalidad de Editar Users agregada (Aún sin conexión a la base de datos)

---------------------------------------Data Antigua-------------------------------------
---------------------------------------- 2 - 11

Para instalar todas las librerías necesarias, de ser necesario:
    pip install -r requirements.txt

En local en la raíz crear el archivo .env más la string de conexión de mongodb

O bien revisar desde la siguiente url luego de realizar cada push (5 minutos aprox)
    https://cudi-clinicamedica.onrender.com/

---------------------------------------- 31 - 10

Ordenando el proyecto considerando el patrón MVC.

----------------------------------------

Agregué la base de Datos.. 
Es así o entrar con el patrón Modelo Vista Controlador (MVC).

En el archivo .env cargamos variables de entorno de manera global..

En el archivo index.html que será la raíz del proyecto ruta armada desde app.py.. @app.route("/")
Ya estamos consumiendo la data servida desde la Base de datos.

----------------------------------------
Vamos comentando lo que sea necesario.. Luego este fichero lo borramos.

Instale:
    - python3 -m venv cudi          "Cree el entorno virtual llamado cudi" 
    - cudi\Scripts\activate         "Levante el entorno virtual"
    - pip install flask             "Instale flask dentro del entorno cudi"

app.py como "puerta de acceso" a la aplicación

from flask import Flask, url_for, render_template
    - con url_for apuntamos a las rutas en los html, lo use dentro del index.html
    Ejemplo: Con static se le indica de manera obliga la carpeta
        -     <link rel="stylesheet" href="{{ url_for ('static',filename='css/styles.css') }}">
    - con render template para renderizar el html necesario

# La carpeta static tiene el css, js, data y assets(imgs) 
# La carpeta templates los html que "desarmaremos" y usaremos con jinja

Desde consola:
    - cudi\Scripts\activate         "Levantamos el entorno virtual"
    - flask run                     "Levantamos el servidor"